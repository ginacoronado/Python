# -*- coding: utf-8 -*-
"""Python_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gGdef2168VGlabsBXNrRzv2pcRSEyUMP

Los modulos o librerias son funciones que han escrito otras personas o compañias y que se pueden usar gratuitamente, incluso yo puedo crear un modulo y compartirlo.
"""

#El primero modulo que vamos a instarlar es el OS, que me permite navegar como si estuviese en una consola de comandos
import os

#Para ver donde estoy dentro de la carpeta
os.getcwd()

#Para ver que hay en el contenido o en mis carpetas, uso el siguiente metodo
os.listdir()

#Para crear una nueva carpeta uso el metodo siguiente
os.makedirs("Carpeta nueva")

os.listdir()

"""**Para poder usar dataframe vamos a activar dos bibliotecas una de ellas es nompy y la otra es pandas, las dos se complementan y hacen cosas difernetes, para crear dataframeexisten varias posibilidades, sin embargo las màs usadas es la lectura directadesde un archivo**"""

import pandas as pd #importo pandas y lo nombro como pd para proximas consultas
import numpy as np #importo numpy y lo nombro con np para proximas consultas

#La primera forma es de crear un dataframe es usando el metodo array y luego guardarlo en una variable
dataframe_1= np.array([[2,4],[6,8],[10,12],[14,16]])

#para crear el dataframe del arreglo anterior debemos usar pandas
pd.DataFrame(dataframe_1)

dataframe_2= np.array([[5,10,15],[20,25,30],[35,40,45],[50,55,60]])

pd.DataFrame(dataframe_2)

dataframe_3= np.array([[3,6,9],[12,15,18],[21,24,27],[30,33,36]])

pd.DataFrame(dataframe_3)

dataframe_1

#Ahora vamos a camviar el nombre a las columas, esto se hace de la siguiente manera
df1=pd.DataFrame(dataframe_1,index=["Fila1","Fila2","Fila3","Fila4"]
                 ,columns=["Columna1","Columna2"])
df1

df2=pd.DataFrame(dataframe_2,index=["Fila1","Fila2","Fila3","Fila4"]
                 ,columns=["Columna1","Columna2","Columna3"])
df2

#Ahora creamos un dataframe usando listas
dataframe2=[[2,4],[6,8],[10,12]]

df_2=pd.DataFrame(dataframe2, index=["Fila1", "Fila2", "Fila3"],
                  columns=["Columna1","Columna2"])
df_2

dataframe3=[["Maria","Torres",34],["Silvia","Naranjo",27],["Tomas","Castelblanco",30]]

df_3=pd.DataFrame(dataframe3, index=["Usuario1","Usuario2","Usuario3"],
                  columns=["Nombre","Apellido","Edad"])
df_3

#Para el tercer metodo usos los diccionarios de la siguiente manera
#Primero creamos dos listas, puedo crear listas que quiera, entiendo que las listas son las del dataframe
ciudadColombia=["Bogota","Medellin","Cali","Barranquilla"]
ciudadesInfo=[11500000,2500000,2200000,1300000]

#Creamos diccionarios con las listas
ciudades={"Ciudades":ciudadColombia, "Población":ciudadesInfo}

#Le paso el metodo pandas
df5=pd.DataFrame(ciudades)

#Llamo el dataframe
df5

cuatro_paises=["Chile","Mexico","Canada","Brasil"]
Poblacion=[19600000,127500000,38930000,215300000]
expectativa_de_vida=[81,72,82,76]

#Creamos diccionarios con las listas
Paises={"Paises":cuatro_paises, "Población":Poblacion, "Expectativa de Vida":expectativa_de_vida}

df6=pd.DataFrame(Paises)
df6

"""Opcion 4 esta es la manera en que se sube datafrme constantemente, porque nos permite realizar trabajos mas robustos con poco código


"""

#Usamos el metodo read de pandas para leer el archivo csv
estudiantes=pd.read_csv("/content/drive/MyDrive/StudentsPerformance (1).csv")

estudiantes

estudiantes

#Para mostrar las primeras columnas de dataframe uso head
estudiantes.head()

#Para mostrar las ultimas filas uso tail
estudiantes.tail()

#Mostrar en el encabezado lo que yo determine
estudiantes.head(10)

#Para mostrar el tamaño del dataframe puedo utilizar el atributo shape
estudiantes.shape

#Para mostrar cuantas filas quiera desde el principio uso head
estudiantes.head(60)

#Metodos de pandas
#Para ver el tamaño y el salto de los datos puedo utilizar el metodo index
estudiantes.index

#Para ver las columnas usamos metodo columns
estudiantes.columns

#Para ver el tipo de dato de las columnas uso dtypes
estudiantes.dtypes

#object es un string y int64 es un entero

#Para obtener la informaciòn de todo el dataframe usmaos el metodo info
estudiantes.info()

#Las medidas de tendencia central de todo el dataframe uso describe
estudiantes.describe()

#Funciones de pandas
len(estudiantes)

max(estudiantes)

max(estudiantes.index)

type(estudiantes)

#Para redondear cifras usos round
round(estudiantes)

#Para mostrar solo una columna lo hago de la siguiente manera
estudiantes["gender"]

estudiantes["gender"].head()

#La otra manera de mostrar una columna es usando el nombre directamente como metodo
estudiantes.gender

estudiantes[["math score","reading score"]]

#Para saber que tipo de dato es ese dataframe uso la funcion type
type(estudiantes[["math score","reading score"]])

#Para mostrar mas de dos columnas puedo hacerlo con el mismo metodo
estudiantes[["math score","reading score", "lunch"]]

#para crear columnas existen dos formas, pero el metodo que más se usa es como si estuviese llamando una columna
#Vamos a crear una columna que nos muestre la nota de quimica
estudiantes

estudiantes["Score Chemistry"]=70
estudiantes

#Tambien puedo crear valores aleatorios con un arreglo de numpy y luego usarlo en en una columa nueva
np.arange(0,1000)

len(np.arange(0,1000))

nota_quimica=np.arange(0,1000)
estudiantes["Score Chemistry"]=nota_quimica

estudiantes

#Asi puedo crear srreglos aleatorios que me sirvan para diligenciar la tabla
aleatorio=np.random.randint(1,100,size=1000)

estudiantes['Score Chemistry']=aleatorio
estudiantes

#Si quisiera crear arreglos aletorios, pero con decimales lo hago de la siguiente manera
np.random.uniform(1,100,size=1000)

#Agregemos una columna correcta
estudiantes["Incorrecta"]=0
estudiantes

#Para borrar una columna
estudiantes.drop(columns=["Incorrecta"])

estudiantes=estudiantes.drop(columns=["Incorrecta"])
estudiantes

